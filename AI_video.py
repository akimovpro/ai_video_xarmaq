import os
import logging
import re
import httpx
import openai
import asyncio
import yt_dlp
from youtube_transcript_api import (
    YouTubeTranscriptApi,
    TranscriptsDisabled,
    NoTranscriptFound,
)

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    Message,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
from telegram.error import BadRequest as TelegramBadRequest

# -----------------------------------------------------------------------------
# ENVIRONMENT & TOKENS
# -----------------------------------------------------------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
APP_URL = os.getenv("APP_URL")
PORT = int(os.getenv("PORT", "443"))

if not BOT_TOKEN or not OPENAI_API_KEY or not APP_URL:
    raise RuntimeError("BOT_TOKEN, OPENAI_API_KEY, and APP_URL must be set")

openai.api_key = OPENAI_API_KEY

# -----------------------------------------------------------------------------
# SOCKS5 PROXY (yt‚Äëdlp only)
# -----------------------------------------------------------------------------
YTDLP_PROXY_USER = os.getenv("YTDLP_PROXY_USER")
YTDLP_PROXY_PASS = os.getenv("YTDLP_PROXY_PASS")
YTDLP_PROXY_HOST = "gate.decodo.com"
YTDLP_PROXY_PORT = 7000

if not YTDLP_PROXY_USER or not YTDLP_PROXY_PASS:
    raise RuntimeError("YTDLP_PROXY_USER and YTDLP_PROXY_PASS must be set")

YTDLP_PROXY_URL = (
    f"socks5h://{YTDLP_PROXY_USER}:{YTDLP_PROXY_PASS}"
    f"@{YTDLP_PROXY_HOST}:{YTDLP_PROXY_PORT}"
)

# -----------------------------------------------------------------------------
# LOGGING
# -----------------------------------------------------------------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# -----------------------------------------------------------------------------
# I18N STRINGS
# -----------------------------------------------------------------------------
T = {
    "start_choose_language": {
        "en": "üéâ *Welcome!* Please choose your language:",
        "ru": "üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
    },
    "language_set": {
        "en": "üåü Language set to English!",
        "ru": "üåü –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π!",
    },
    "select_language": {"en": "üåê Select language", "ru": "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"},
    "help_header": {"en": "‚ùì Help", "ru": "‚ùì –ü–æ–º–æ—â—å"},
    "help_text": {
        "en": "1Ô∏è‚É£ Send a YouTube link\n2Ô∏è‚É£ Receive the summary\n3Ô∏è‚É£ Use /language to change language",
        "ru": "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube\n2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é\n3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /language –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞",
    },
    "prompt_send_link": {"en": "üì∫ Send a YouTube link:", "ru": "üì∫ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ:"},
    "invalid_url": {"en": "üö´ Invalid YouTube URL.", "ru": "üö´ –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞."},
    "fetching_captions": {
        "en": "üîÑ Fetching captions‚Ä¶",
        "ru": "üîÑ –ü–æ–ª—É—á–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã‚Ä¶",
    },
    "subtitles_not_found": {
        "en": "‚ùå Subtitles not found.",
        "ru": "‚ùå –°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
    },
    "summarizing": {"en": "üìù Summarizing‚Ä¶", "ru": "üìù –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é‚Ä¶"},
    "openai_error": {"en": "‚ö†Ô∏è OpenAI error:", "ru": "‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenAI:"},
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —á–∞–Ω–∫–∏–Ω–≥–∞ (–µ—Å–ª–∏ –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –±—É–¥—É—â–µ–º)
    "summarizing_long_video": {"en": "üìù Summarizing long video, this may take a while...", "ru": "üìù –ê–Ω–Ω–æ—Ç–∏—Ä—É–µ–º –¥–ª–∏–Ω–Ω–æ–µ –≤–∏–¥–µ–æ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..."},
    "summarizing_chunk": {"en": "üìù Summarizing part", "ru": "üìù –ê–Ω–Ω–æ—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç—å"},
    "creating_final_summary": {"en": "üìù Creating final summary...", "ru": "üìù –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é..."},
    "error_summarizing_chunk": {"en": "Error summarizing part", "ru": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —á–∞—Å—Ç–∏"},
}

MENU_ITEMS = {
    "summarize": {"en": "üì∫ Summarize Video", "ru": "üì∫ –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ"},
    "change_lang": {"en": "üåê Change Language", "ru": "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"},
    "help": {"en": "‚ùì Help", "ru": "‚ùì –ü–æ–º–æ—â—å"},
}


def tr(key: str, lang: str) -> str:
    """Translate helper with graceful fallback to English."""
    return T.get(key, {}).get(lang) or T.get(key, {}).get("en") or key


# -----------------------------------------------------------------------------
# USER LANGUAGE PREFERENCES
# -----------------------------------------------------------------------------
user_languages: dict[int, str] = {}

# -----------------------------------------------------------------------------
# REGEX FOR YOUTUBE LINKS
# -----------------------------------------------------------------------------
YOUTUBE_STD_REGEX = re.compile(
    r"(?:https?://)?(?:www\.)?"
    r"(?:youtube\.com/(?:watch\?v=|shorts/|live/|embed/|v/)|youtu\.be/)"
    r"([A-Za-z0-9_-]{11})",
)
YOUTUBE_GOOGLEUSERCONTENT_NUMERIC_REGEX = re.compile(
    r"(https?://(?:www\.)?googleusercontent\.com/youtube\.com/([0-9]+))",
)

# -----------------------------------------------------------------------------
# CAPTION PARSERS (SRT + VTT)
# -----------------------------------------------------------------------------
SRT_PATTERN = re.compile(
    r"^\d+\s*?\n(\d{2}:\d{2}:\d{2},\d{3})\s*-->.*?\n(.+?)\s*?(?:\n\n|\Z)",
    re.S | re.M,
)
VTT_TS_RE = re.compile(r"(?P<h>\d{2,}):(?P<m>\d{2}):(?P<s>\d{2})\.(?P<ms>\d{3})")


def _ts2sec(h: int, m: int, s: int) -> int:
    return h * 3600 + m * 60 + s


def parse_srt(text: str) -> list:
    entries = []
    for m in SRT_PATTERN.finditer(text):
        start_ts_str = m.group(1).split(",")[0]
        h, mi, s = map(int, start_ts_str.split(":"))
        body = " ".join(line.strip() for line in m.group(2).splitlines() if line.strip())
        if body:
            entries.append({"start": _ts2sec(h, mi, s), "text": body})
    return entries


def parse_vtt(text: str) -> list:
    entries = []
    lines = text.splitlines()
    i = 0
    while i < len(lines):
        if "-->" in lines[i]:
            ts_str = lines[i].split("-->")[0].strip()
            m = VTT_TS_RE.search(ts_str)
            i += 1
            body_lines = []
            while i < len(lines) and lines[i].strip():
                body_lines.append(lines[i].strip())
                i += 1
            if m and body_lines:
                h, mi, s = int(m.group("h")), int(m.group("m")), int(m.group("s"))
                entries.append({"start": _ts2sec(h, mi, s), "text": " ".join(body_lines)})
        i += 1
    return entries


def parse_captions(text: str, ext: str) -> list | None:
    return parse_srt(text) if ext == "srt" else parse_vtt(text) if ext == "vtt" else None


# -----------------------------------------------------------------------------
# FETCH CAPTIONS WITH MINIMUM TRAFFIC
# -----------------------------------------------------------------------------
async def fetch_transcript(video_id_or_url: str, langs: list[str] | None = None) -> list | None:
    langs = langs or ["ru", "en"]
    video_id_match = YOUTUBE_STD_REGEX.search(video_id_or_url)
    video_id = video_id_match.group(1) if video_id_match else video_id_or_url

    loop = asyncio.get_running_loop()
    try:
        transcript_data = await loop.run_in_executor(
            None, lambda: YouTubeTranscriptApi.get_transcript(video_id, languages=langs)
        )
        return [
            {"start": int(float(it["start"])), "text": it["text"]} # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å \n
            for it in transcript_data
            if it.get("text")
        ]
    except (TranscriptsDisabled, NoTranscriptFound, Exception) as e:  # noqa: BLE001
        logger.info("Transcript API failed (%s), falling back to yt_dlp", e)

    ydl_opts = {
        "writesubtitles": True,
        "writeautomaticsub": True,
        "subtitleslangs": langs,
        "subtitlesformat": "best",
        "skip_download": True,
        "quiet": True,
        "proxy": YTDLP_PROXY_URL,
        "logger": logger,
        "extract_flat": "in_playlist",
        "cachedir": False,
        "nocheckcertificate": True,
        "extractor_args": {"youtube": {"skip": ["dash"]}},
    }

    def _pick(pool):
        for lang_code in langs:
            for ext in ("srt", "vtt"):
                for it in pool.get(lang_code, []):
                    if it.get("ext") == ext and it.get("url"):
                        return it["url"], ext
        return None, None

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = await loop.run_in_executor(None, lambda: ydl.extract_info(video_id_or_url, download=False))
    if not info:
        return None
    
    subtitles_info = info.get("subtitles", {})
    auto_captions_info = info.get("automatic_captions", {})

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤, —á—Ç–æ–±—ã –ø–æ–∏—Å–∫ –±—ã–ª –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º
    # (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ yt-dlp –≤–µ—Ä–Ω—É–ª –∏—Ö –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤)
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä—É—á–Ω—ã–º —Å—É–±—Ç–∏—Ç—Ä–∞–º, –µ—Å–ª–∏ —è–∑—ã–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    merged_subs = {}
    for lang_code in langs:
        if lang_code in subtitles_info:
             merged_subs.setdefault(lang_code, []).extend(subtitles_info[lang_code])
        if lang_code in auto_captions_info:
             merged_subs.setdefault(lang_code, []).extend(auto_captions_info[lang_code])
    
    # –ï—Å–ª–∏ –¥–ª—è –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, —Å–º–æ—Ç—Ä–∏–º –≤—Å–µ —á—Ç–æ –µ—Å—Ç—å
    if not any(lang_code in merged_subs for lang_code in langs):
        for lang_code in subtitles_info: # –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä—É—á–Ω—ã–µ
            merged_subs.setdefault(lang_code, []).extend(subtitles_info[lang_code])
        for lang_code in auto_captions_info: # –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ
             merged_subs.setdefault(lang_code, []).extend(auto_captions_info[lang_code])


    url, ext = _pick(merged_subs) # –ò—Å–ø–æ–ª—å–∑—É–µ–º _pick –Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
    
    if not url:
        return None

    async with httpx.AsyncClient(timeout=30.0, headers={"Accept-Encoding": "gzip"}) as client:
        r = await client.get(url)
        r.raise_for_status()
    return parse_captions(r.text, ext)


# -----------------------------------------------------------------------------
# HELPERS
# -----------------------------------------------------------------------------
async def robust_edit(msg: Message | None, text: str, ctx, upd, kb, md: str | None = None):
    if msg:
        try:
            return await msg.edit_text(text, reply_markup=kb, parse_mode=md)
        except TelegramBadRequest:
            pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return await ctx.bot.send_message(upd.effective_chat.id, text, reply_markup=kb, parse_mode=md)


def main_menu(lang):
    return ReplyKeyboardMarkup(
        [
            [MENU_ITEMS["summarize"][lang]],
            [MENU_ITEMS["change_lang"][lang]],
            [MENU_ITEMS["help"][lang]],
        ],
        resize_keyboard=True,
    )


def lang_kb():
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("üá¨üáß English", callback_data="lang_en"),
                InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
            ]
        ]
    )

# –ù–æ–≤–∞—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
def format_timestamp_hms(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —Å—Ç—Ä–æ–∫—É HH:MM:SS –∏–ª–∏ MM:SS."""
    h = seconds // 3600
    m = (seconds % 3600) // 60
    s = seconds % 60
    if h > 0:
        return f"{h:02d}:{m:02d}:{s:02d}"
    else:
        return f"{m:02d}:{s:02d}"

# -----------------------------------------------------------------------------
# COMMANDS
# -----------------------------------------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        tr("start_choose_language", "en"),  # Always show initial prompt in both for clarity
        parse_mode="Markdown",
        reply_markup=lang_kb(),
    )


async def language_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    lang = q.data.split("_")[1]
    user_languages[q.from_user.id] = lang
    await q.edit_message_text(
        tr("language_set", lang), 
        reply_markup=None # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    await context.bot.send_message(
        chat_id=q.message.chat_id,
        text=f"{tr('language_set', lang)}\n{tr('prompt_send_link', lang)}", # –î–æ–±–∞–≤–∏–º —Å—Ä–∞–∑—É –ø—Ä–æ—Å—å–±—É –ø—Ä–∏—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫—É
        reply_markup=main_menu(lang)
    )


async def language_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = user_languages.get(update.effective_user.id, "en")
    await update.message.reply_text(tr("select_language", lang), reply_markup=lang_kb())


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = user_languages.get(update.effective_user.id, "en")
    await update.message.reply_text(tr("help_text", lang), reply_markup=main_menu(lang))


# -----------------------------------------------------------------------------
# MESSAGE HANDLER
# -----------------------------------------------------------------------------
async def handle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = user_languages.get(uid)
    if not lang:
        await update.message.reply_text(tr("select_language", "en"), reply_markup=lang_kb())
        return

    text = update.message.text.strip()
    kb = main_menu(lang)

    if text == MENU_ITEMS["summarize"][lang]:
        await update.message.reply_text(tr("prompt_send_link", lang), reply_markup=kb)
        return
    if text == MENU_ITEMS["change_lang"][lang]:
        await language_cmd(update, context)
        return
    if text == MENU_ITEMS["help"][lang]:
        await help_cmd(update, context)
        return

    vid = None
    m = YOUTUBE_STD_REGEX.search(text)
    if m:
        vid = m.group(1)
    else:
        m = YOUTUBE_GOOGLEUSERCONTENT_NUMERIC_REGEX.search(text)
        if m:
            vid = m.group(1)

    if not vid:
        await update.message.reply_text(tr("invalid_url", lang), reply_markup=kb)
        return

    status_msg = await update.message.reply_text(tr("fetching_captions", lang), reply_markup=kb)
    captions = await fetch_transcript(vid, langs=[lang, "en"]) # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    
    if not captions:
        await robust_edit(status_msg, tr("subtitles_not_found", lang), context, update, kb)
        return

    # --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ —Å —Ä–µ–¥–∫–∏–º–∏ –º–µ—Ç–∫–∞–º–∏ ---
    TIME_INTERVAL_SECONDS = 60  # –°—Ç–∞–≤–∏—Ç—å –º–µ—Ç–∫—É –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
    processed_transcript_parts = []
    current_block_texts = []
    current_block_start_time_sec = 0 
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –ø–µ—Ä–≤–∞—è –∂–µ –∑–∞–ø–∏—Å—å –≤—ã–∑–≤–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª > 0
    last_timestamped_block_start_time_sec = -TIME_INTERVAL_SECONDS -1 

    if captions: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—É–±—Ç–∏—Ç—Ä—ã –µ—Å—Ç—å
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å—É–±—Ç–∏—Ç—Ä–∞
        current_block_start_time_sec = captions[0]['start'] 
    
        for caption_entry in captions:
            entry_start_time = caption_entry['start']
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
            entry_text = " ".join(caption_entry['text'].strip().splitlines())

            if not entry_text: # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
                continue
            
            # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –º–µ—Ç–∫–∏: 
            # 1. –ü—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–µ—Ç–∫–∏ –ò–õ–ò
            # 2. –≠—Ç–æ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –º—ã –¥–æ–±–∞–≤–ª—è–µ–º (processed_transcript_parts –µ—â–µ –ø—É—Å—Ç)
            if (entry_start_time >= last_timestamped_block_start_time_sec + TIME_INTERVAL_SECONDS) or \
               not processed_transcript_parts :
                
                if current_block_texts: # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫
                    block_text_content = " ".join(current_block_texts)
                    processed_transcript_parts.append(f"[{format_timestamp_hms(current_block_start_time_sec)}] {block_text_content}")
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫
                current_block_texts = [entry_text]
                current_block_start_time_sec = entry_start_time 
                last_timestamped_block_start_time_sec = entry_start_time # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–µ—Ç–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
            else:
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
                current_block_texts.append(entry_text)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫, –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è
        if current_block_texts:
            block_text_content = " ".join(current_block_texts)
            processed_transcript_parts.append(f"[{format_timestamp_hms(current_block_start_time_sec)}] {block_text_content}")

    transcript = "\n".join(processed_transcript_parts)
    if not transcript and captions: # –ï—Å–ª–∏ —Å—É–±—Ç–∏—Ç—Ä—ã –±—ã–ª–∏, –Ω–æ –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å –ø—É—Å—Ç—ã–º–∏
        transcript = "[–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ]" if lang == "ru" else "[Transcript contains no textual content]"
    elif not captions: # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤—ã—à–µ, –Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã
        transcript = "[–°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã]" if lang == "ru" else "[Subtitles not found]"
    # --- –ö–æ–Ω–µ—Ü –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ ---

    if not transcript.strip() or transcript.startswith("["): # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ã—à–µ –∏–ª–∏ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ
        # –ï—Å–ª–∏ captions –±—ã–ª–∏, –Ω–æ transcript –ø—É—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –±—ã–ª–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏)
        if captions and not transcript.strip():
             await robust_edit(status_msg, tr("subtitles_not_found", lang), context, update, kb) # –ú–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –æ—à–∏–±–∫—É
        # –ï—Å–ª–∏ captions –Ω–µ –±—ã–ª–æ, —Ç–æ subtitles_not_found —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.
        return


    if len(transcript) > 100000:
        transcript = transcript[:100000] + "\n[truncated]"

    instr = (
        "List 5-10 bullet points about the main things (with timestamps) then a 2-3 paragraph summary."
        if lang == "en"
        else "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ 5-10 –ø—É–Ω–∫—Ç–æ–≤ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º—ã—Å–ª—è–º–∏ —Å —Ç–∞–π–º–∫–æ–¥–∞–º–∏, –∑–∞—Ç–µ–º 2-3 –∞–±–∑–∞—Ü–∞ –ø–µ—Ä–µ—Å–∫–∞–∑–∞."
    )
    prompt = f"{instr}\n\nTranscript:\n{transcript}"

    await robust_edit(status_msg, tr("summarizing", lang), context, update, kb)
    try:
        rsp = await openai.ChatCompletion.acreate(
            model="gpt-4o", # –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä gpt-4o –∏–ª–∏ gpt-4-turbo
            messages=[
                {
                    "role": "system",
                    "content": "You are best in the world video summarizer. Preserve maximum details. Timestamps in your summary should correspond to the timestamps provided in the transcript.",
                },
                {"role": "user", "content": prompt},
            ],
            max_tokens=1000, # –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å, –µ—Å–ª–∏ –æ–∂–∏–¥–∞—é—Ç—Å—è –¥–ª–∏–Ω–Ω—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
            temperature=0.5,
        )
        summ = rsp.choices[0].message.content.strip()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è Telegram (–º–∞–∫—Å. 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(summ) > 4096:
            await robust_edit(status_msg, summ[:4090] + "\n[...]", context, update, kb, md="Markdown") # –û–±—Ä–µ–∑–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å—Ç–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        else:
            await robust_edit(status_msg, summ, context, update, kb, md="Markdown")

    except Exception as e:  # noqa: BLE001
        logger.error(f"OpenAI API error: {e}", exc_info=True)
        await robust_edit(status_msg, f"{tr('openai_error', lang)} {type(e).__name__}: {e}", context, update, kb)


# -----------------------------------------------------------------------------
# ENTRYPOINT
# -----------------------------------------------------------------------------
if __name__ == "__main__":
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("language", language_cmd))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CallbackQueryHandler(language_button, pattern="^lang_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle))

    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ–±—Ö—É–∫ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å app.run_polling()
    # logger.info("Starting polling...")
    # app.run_polling(drop_pending_updates=True)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–µ–±—Ö—É–∫–∞ (–µ—Å–ª–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
    webhook_path = f"/{BOT_TOKEN.split(':')[-1]}" # –ë–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å —á–∞—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—É—Ç–∏
    webhook_url = APP_URL.rstrip("/") + webhook_path
    logger.info("Starting webhook at %s on port %d", webhook_url, PORT)

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=webhook_path,
        webhook_url=webhook_url,
        drop_pending_updates=True,
    )
